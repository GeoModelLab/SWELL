weather_data$Latitude
weather_data$Longitude <- round(weather_data$Longitude, 5)
# Extract unique combinations of rounded Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
unique_coords
View(unique_coords)
# Set tolerance for latitude and longitude matching (e.g., 0.1 degrees)
tolerance <- 0.1  # Adjust as necessary
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lon <- unique_coords[i, "Longitude"]
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
lat
i
i<-1
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lat
View(unique_coords)
# Round Latitude and Longitude to 5 decimal places for comparison
weather_data$Latitude <- round(weather_data$Latitude, 5)
weather_data$Longitude <- round(weather_data$Longitude, 5)
# Extract unique combinations of rounded Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
# Now print the unique coordinates to confirm they are properly rounded
print(unique_coords)  # Check the unique rounded coordinates
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
ndvi_file <- file.path(config_folder, "ndvi_data.csv")
parameters_file <- file.path(config_folder, "parameters.csv")
# Ensure necessary directories exist
dir.create(weather_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsCalibration"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsValidation"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsParameters"), showWarnings = FALSE, recursive = TRUE)
# Round Latitude and Longitude to 5 decimal places for comparison
weather_data$Latitude <- round(weather_data$Latitude, 5)
weather_data$Longitude <- round(weather_data$Longitude, 5)
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
unique_coords
# Print the unique coordinates to check full precision
print(unique_coords)  # Ensure these are the full values
View(unique_coords)
# Ensure full precision in printing
options(digits = 15)  # This will print numbers with 15 digits of precision
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
# Print the unique coordinates to check full precision
print(unique_coords)  # Ensure these are the full values
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
ndvi_file <- file.path(config_folder, "ndvi_data.csv")
parameters_file <- file.path(config_folder, "parameters.csv")
# Ensure necessary directories exist
dir.create(weather_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsCalibration"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsValidation"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsParameters"), showWarnings = FALSE, recursive = TRUE)
# Round Latitude and Longitude to 5 decimal places for comparison
weather_data$Latitude <- round(weather_data$Latitude, 5)
weather_data$Longitude <- round(weather_data$Longitude, 5)
# Ensure full precision in printing
options(digits = 15)  # This will print numbers with 15 digits of precision
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
# Print the unique coordinates to check full precision
print(unique_coords)  # Ensure these are the full values
# Loop through each unique combination of Latitude and Longitude
for (i in 1:nrow(unique_coords)) {
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lon <- unique_coords[i, "Longitude"]
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0("weather_output_", lat, "_", lon, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
}
lat
weather_data<-read.csv('era5_land_weather_data_HAZIMUTH_orchard_daily_2009-2024.csv') |>
select(lat,lon,date,temperature_2m_max,temperature_2m_min) |>
rename(Latitude=lat,Longitude=lon,Tmin=temperature_2m_min,Tmax=temperature_2m_max,
Date=date) |>
mutate(Tmin=Tmin-273.15,Tmax=Tmax-273.15,Date=as.Date(Date)) |>
mutate(id=paste0(Latitude,"_",Longitude)) |>
arrange(id) |>
group_by(id) |>
drop_na() |>
ungroup() |>
select(-id)
weather<-as.data.frame(weather)
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
ndvi_file <- file.path(config_folder, "ndvi_data.csv")
parameters_file <- file.path(config_folder, "parameters.csv")
# Ensure necessary directories exist
dir.create(weather_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsCalibration"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsValidation"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsParameters"), showWarnings = FALSE, recursive = TRUE)
# Ensure full precision in printing
options(digits = 15)  # This will print numbers with 15 digits of precision
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
unique_coords
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lat
lon <- unique_coords[i, "Longitude"]
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
filtered_data
weather_data$Latitude
unique_coords
lon
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
i
i<-1
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lon <- unique_coords[i, "Longitude"]
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
filtered_data
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lat
lon <- unique_coords[i, "Longitude"]
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
# Ensure full precision in printing
options(digits = 10)  # This will print numbers with 15 digits of precision
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data[, c("Latitude", "Longitude")])
i<-1
# Loop through each unique combination of Latitude and Longitude
for (i in 1:nrow(unique_coords)) {
# Extract latitude and longitude for the current iteration
lat <- unique_coords[i, "Latitude"]
lon <- unique_coords[i, "Longitude"]
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0("weather_output_", lat, "_", lon, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
}
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
lat
i
# Print out the coordinates to ensure full precision
print(paste("Processing Latitude:", lat, "Longitude:", lon))  # Debugging
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, Latitude == lat & Longitude == lon)
weather_file
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
weather_file
####input check####
# Check if weather_data is a data frame
if (!is.data.frame(weather_data)) {
stop("'weather_data' object must be a data frame.")
}
# Check if vegetation_data is a data frame
if (!is.data.frame(vegetation_data)) {
stop("'vegetation_data' must be a data frame.")
}
# Check if vegetationIndex is one of the allowed values
if (!vegetationIndex %in% c("EVI", "NDVI")) {
stop("'vegetationIndex' must be either 'EVI' or 'NDVI'.")
}
# Check if SWELLparameters is a list
if (!is.data.frame(SWELLparameters)) {
stop("'SWELLparameters' must be a dataframe.")
}
# Check if start_year and end_year are numeric and valid
if (!is.numeric(start_year) || !is.numeric(end_year)) {
stop("'start_year' and 'end_year' must be numeric.")
}
if (start_year > end_year) {
stop("'start_year' must be less than or equal to 'end_year'.")
}
# Check if 'Date' column exists in weather_data
if (!"Date" %in% colnames(weather_data)) {
stop("'weather_data' must contain a column named 'Date'.")
}
# Check if 'Date' column is of type Date
if (!inherits(weather_data$Date, "Date")) {
stop("'Date' column in 'weather_data' must be of type Date.")
}
# Check if start_year and end_year are present in the weather_data
weather_years <- unique(format(weather_data$Date, "%Y"))
if (!as.character(start_year) %in% weather_years) {
stop(paste0("Start year ", start_year, " is not present in 'weather_data'."))
}
if (!as.character(end_year) %in% weather_years) {
stop(paste0("End year ", end_year, " is not present in 'weather_data'."))
}
# Check if simplexes, iterations, and validationReplicates are positive integers
if (!is.numeric(simplexes) || simplexes <= 0 || simplexes != as.integer(simplexes)) {
stop("'simplexes' must be a positive integer.")
}
if (!is.numeric(iterations) || iterations <= 0 || iterations != as.integer(iterations)) {
stop("'iterations' must be a positive integer.")
}
# Determine executable path based on the operating system
exe_path <- switch(Sys.info()["sysname"],
"Windows" =
system.file("extdata", "Windows", "runner.exe", package = "SWELL"),
"Darwin"  =
system.file("extdata", "macOS", "runner", package = "SWELL"),
"Linux"   =
system.file("extdata", "Linux", "runner", package = "SWELL"))
if (!file.exists(exe_path)) {
stop("Executable not found at the specified path: ", exe_path)
}
# Define configuration folder and ensure it exists
config_folder <- dirname(exe_path)
if (!dir.exists(config_folder)) {
stop("Config folder does not exist: ", config_folder)
}
# Default config_folder to a suitable directory
if (missing(config_folder)) {
config_folder <- tempdir()  # Use a temporary directory by default
}
# Prepare weather data with unique file names
weather_data$fileName <- paste0(weather_data$Latitude, "_", weather_data$Longitude)
weather_data$fileName
# Prepare weather data with unique file names
weather_data$fileName <- paste0(weather_data$Latitude, "_", weather_data$Longitude)
# Clean date column if present
if ("Date" %in% names(weather_data)) {
weather_data$Date <- gsub("^\"|\"$", "", as.character(weather_data$Date))
}
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
weather_file
ndvi_file <- file.path(config_folder, "ndvi_data.csv")
parameters_file <- file.path(config_folder, "parameters.csv")
# Ensure necessary directories exist
dir.create(weather_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsCalibration"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsValidation"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsParameters"), showWarnings = FALSE, recursive = TRUE)
# Ensure full precision in printing
options(digits = 10)  # This will print numbers with 15 digits of precision
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data$fileName)
unique_coords
i<-1
thisFile<-unique_coords[i]
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, fileName = thisFile)
View(weather_data)
weather_data<-read.csv('era5_land_weather_data_HAZIMUTH_orchard_daily_2009-2024.csv') |>
select(lat,lon,date,temperature_2m_max,temperature_2m_min) |>
rename(Latitude=lat,Longitude=lon,Tmin=temperature_2m_min,Tmax=temperature_2m_max,
Date=date) |>
mutate(Tmin=Tmin-273.15,Tmax=Tmax-273.15,Date=as.Date(Date)) |>
mutate(id=paste0(Latitude,"_",Longitude)) |>
arrange(id) |>
group_by(id) |>
drop_na() |>
ungroup() |>
select(-id)
weather<-as.data.frame(weather)
vegetation_data<-evi |>
select(orchard_id,district,year,doy,longitude,latitude,evi)
library(SWELL)
vegetationIndex<-'EVI'
start_year=2009
end_year=2023
simplexes=4
iterations=1000
####input check####
# Check if weather_data is a data frame
if (!is.data.frame(weather_data)) {
stop("'weather_data' object must be a data frame.")
}
# Check if vegetation_data is a data frame
if (!is.data.frame(vegetation_data)) {
stop("'vegetation_data' must be a data frame.")
}
# Check if vegetationIndex is one of the allowed values
if (!vegetationIndex %in% c("EVI", "NDVI")) {
stop("'vegetationIndex' must be either 'EVI' or 'NDVI'.")
}
# Check if SWELLparameters is a list
if (!is.data.frame(SWELLparameters)) {
stop("'SWELLparameters' must be a dataframe.")
}
# Check if start_year and end_year are numeric and valid
if (!is.numeric(start_year) || !is.numeric(end_year)) {
stop("'start_year' and 'end_year' must be numeric.")
}
if (start_year > end_year) {
stop("'start_year' must be less than or equal to 'end_year'.")
}
# Check if 'Date' column exists in weather_data
if (!"Date" %in% colnames(weather_data)) {
stop("'weather_data' must contain a column named 'Date'.")
}
# Check if 'Date' column is of type Date
if (!inherits(weather_data$Date, "Date")) {
stop("'Date' column in 'weather_data' must be of type Date.")
}
# Check if start_year and end_year are present in the weather_data
weather_years <- unique(format(weather_data$Date, "%Y"))
if (!as.character(start_year) %in% weather_years) {
stop(paste0("Start year ", start_year, " is not present in 'weather_data'."))
}
if (!as.character(end_year) %in% weather_years) {
stop(paste0("End year ", end_year, " is not present in 'weather_data'."))
}
# Check if simplexes, iterations, and validationReplicates are positive integers
if (!is.numeric(simplexes) || simplexes <= 0 || simplexes != as.integer(simplexes)) {
stop("'simplexes' must be a positive integer.")
}
if (!is.numeric(iterations) || iterations <= 0 || iterations != as.integer(iterations)) {
stop("'iterations' must be a positive integer.")
}
# Determine executable path based on the operating system
exe_path <- switch(Sys.info()["sysname"],
"Windows" =
system.file("extdata", "Windows", "runner.exe", package = "SWELL"),
"Darwin"  =
system.file("extdata", "macOS", "runner", package = "SWELL"),
"Linux"   =
system.file("extdata", "Linux", "runner", package = "SWELL"))
if (!file.exists(exe_path)) {
stop("Executable not found at the specified path: ", exe_path)
}
# Define configuration folder and ensure it exists
config_folder <- dirname(exe_path)
if (!dir.exists(config_folder)) {
stop("Config folder does not exist: ", config_folder)
}
# Default config_folder to a suitable directory
if (missing(config_folder)) {
config_folder <- tempdir()  # Use a temporary directory by default
}
# Prepare weather data with unique file names
weather_data$fileName <- paste0(weather_data$Latitude, "_", weather_data$Longitude)
# Clean date column if present
if ("Date" %in% names(weather_data)) {
weather_data$Date <- gsub("^\"|\"$", "", as.character(weather_data$Date))
}
# Define file paths
weather_dir <- file.path(config_folder, "weather")
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
ndvi_file <- file.path(config_folder, "ndvi_data.csv")
parameters_file <- file.path(config_folder, "parameters.csv")
# Ensure necessary directories exist
dir.create(weather_dir, showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsCalibration"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsValidation"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(config_folder, "outputsParameters"), showWarnings = FALSE, recursive = TRUE)
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data$fileName)
i<-1
thisFile<-unique_coords[i]
thisFile
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, fileName == thisFile)
thisFile
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0(thisFile, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
# Extract unique combinations of Latitude and Longitude
unique_coords <- unique(weather_data$fileName)
i<-1
# Loop through each unique combination of Latitude and Longitude
for (i in 1:nrow(unique_coords)) {
thisFile<-unique_coords[i]
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, fileName == thisFile)
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0(thisFile, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
}
unique_coords
nrow(unique_coords)
# Loop through each unique combination of Latitude and Longitude
for (i in 1:length(unique_coords)) {
thisFile<-unique_coords[i]
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, fileName == thisFile)
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0(thisFile, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
}
weather_file <- file.path(weather_dir, paste0(unique(weather_data$fileName), ".csv"))
weather_file
thisFile
weather_file
# Generate a file name based on latitude and longitude
file_name <- paste0(weather_dir,thisFile, ".csv")
paste0(weather_dir,thisFile, ".csv")
# Generate a file name based on latitude and longitude
file_name <- paste0(weather_dir,'//',thisFile, ".csv")
paste0(weather_dir,'//',thisFile, ".csv")
# Generate a file name based on latitude and longitude
file_name <- paste0(weather_dir,'/',thisFile, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
# Loop through each unique combination of Latitude and Longitude
for (i in 1:length(unique_coords)) {
thisFile<-unique_coords[i]
# Filter the data for this latitude and longitude combination
filtered_data <- subset(weather_data, fileName == thisFile)
# Ensure there is data to write
if (nrow(filtered_data) > 0) {
# Generate a file name based on latitude and longitude
file_name <- paste0(weather_dir,'/',thisFile, ".csv")
# Write the filtered data to the respective file
write.csv(filtered_data, file = file_name, row.names = FALSE, quote = FALSE)
} else {
print("No data found for this Latitude and Longitude.")  # Debugging
}
}
iterations=1000
pixels<-swellCalibration(as.data.frame(weather_data),vegetation_data,"EVI",
SWELLparameters,start_year = 2009,end_year = 2023,
simplexes=4,iterations=1000)
#read ndvi-evi hazelnut data
rm(list=ls())
#set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
evi<-read.csv('evi_on_mod_200323.csv') |>
pivot_longer(c(2:927),names_to = 'dateCol') |>
select(district,orchard_id,latitude,longitude,dateCol,value) |>
mutate(
# Extract year, month, and day of year using a flexible regex
year = as.integer(sub(".*_(\\d{4})_\\d{2}_\\d{2}_EVI", "\\1", dateCol)),
doy = yday(as.Date(sub(".*_(\\d{4})_(\\d{2})_(\\d{2})_EVI", "\\1-\\2-\\3", dateCol), "%Y-%m-%d"))
) |>
select(-dateCol)|>
rename(evi=value)
weather_data<-read.csv('era5_land_weather_data_HAZIMUTH_orchard_daily_2009-2024.csv') |>
select(lat,lon,date,temperature_2m_max,temperature_2m_min) |>
rename(Latitude=lat,Longitude=lon,Tmin=temperature_2m_min,Tmax=temperature_2m_max,
Date=date) |>
mutate(Tmin=Tmin-273.15,Tmax=Tmax-273.15,Date=as.Date(Date)) |>
mutate(id=paste0(Latitude,"_",Longitude)) |>
arrange(id) |>
group_by(id) |>
drop_na() |>
ungroup() |>
select(-id)
rm(list=ls())
#install.packages("pkgdown")
#if (!requireNamespace("devtools", quietly = TRUE)) {
#  install.packages("devtools")
#}
#set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
remove.packages("SWELL")
devtools::install()
devtools::document()
